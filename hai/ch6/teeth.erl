
-module(teeth).
-export([alert/1]).
-include_lib("eunit/include/eunit.hrl").

alert(Teeth) ->
  alert(Teeth, []).

alert([], Results) ->
  lists:reverse(Results);

alert([H | T], Results) ->
  case H of
    [0] -> alert(T, [32 - length(T) | Results]);
    _ -> alert(T, Results)
  end.

alert_test_() ->
  PocketDepths = [[0], [2,2,1,2,2,1], [3,1,2,3,2,3],
                  [3,1,3,2,1,2], [3,2,3,2,2,1], [2,3,1,2,1,1],
                  [3,1,3,2,3,2], [3,3,2,1,3,1], [4,3,3,2,3,3],
                  [3,1,1,3,2,2], [4,3,4,3,2,3], [2,3,1,3,2,2],
                  [1,2,1,1,3,2], [1,2,2,3,2,3], [1,3,2,1,3,3], [0],
                  [3,2,3,1,1,2], [2,2,1,1,3,2], [2,1,1,1,1,2],
                  [3,3,2,1,1,3], [3,1,3,2,3,2], [3,3,1,2,3,3],
                  [1,2,2,3,3,3], [2,2,3,2,3,3], [2,2,2,4,3,4],
                  [3,4,3,3,3,4], [1,1,2,3,1,2], [2,2,3,2,1,3],
                  [3,4,2,4,4,3], [3,3,2,1,2,3], [2,2,2,2,3,3],
                  [3,2,3,2,3,2]],
  [?_assert(alert(PocketDepths) =:= [1,16])].
